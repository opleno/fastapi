
Uvicorn
    Pros: its Workers use ASGI (Asynchronous Sever Gateway Interface)
    Cons: as a Process Manager, it is not the best option

Gunicorn
    Pros: good Process Manager, compatibible with Uvicorn Workers
    Cons: uses WSGI

DevOps clarification
    If Kubernetes is to be used, load balancing etc. is usually done at a cluster 
    level, so it is better to use only Uvicorn

When we want our Linux service to reload after a server error, it needs to be enabled
with the following command:
    sudo systemctl enable fastapi-course.service

If needed: https://lowendbox.com/blog/how-to-replace-apache-with-nginx-on-ubuntu-18-04/

Linux VM deployment:
    -> create VM in cloud provider (e.g. DigitalOcean)
    ssh root@[IP]
    sudo apt update && apt upgrade -y
    apt install python3-pip
    sudo apt install postgresql postgresql-contrib -y
    psql -U postgres -d postgres (will fail as we are logged as root)
    su - postgres
    psql -U postgres -d postgres (will prompt a postgres console)
    \password postgres
    \q
    exit
    cd /etc/postgresql/14/main/
    nano postgresql.conf
        -> add listen_addresses = '*' to "connections and authentication section"
    nano pg_hba.conf
        -> change "peer" method to the other one used in the table
        -> change 127.0.0.1... to 0.0.0.0/0 for IPv4 and ::/0 for IPv6 if we want to let any IP to access the database (forbidden in production)
    systemctl restart postgresql
    ssh root@IP
    adduser sql-admin
    usermod -aG sudo sql-admin  (add it to the sudoers group)
    su - sql-admin
    mkdir fastapi-course
    cd fastapi-course/
    virtualenv venv
    mkdir src
    cd src
    git clone https://github.com/opleno/fastapi.git .
    cd ..
    source venv/bin/activate
    cd src
    pip install -r requirements.txt
        -> if a library is missing, install it:
            deactivate
            sudo apt install libpq-dev
            source venv/bin/activate
    cd
    nano .env
        -> add all env variables
    nano .profile
        -> add at the bottom:
        set -o allexport; source ~/.env; set +o allexport
    cd fastapi-course/
    source venv/bin/activate
    cd src
    alembic upgrade head
    2 options:
        uvicorn --host 0.0.0.0 app.main:app
        gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8000
        -> if any errors with the last one:
            pip install httptools
            pip install uvloop
    -> as we want our server to run automatically on every boot, lets create a service
    cd /etc/systemd/system/
    sudo nano fastapi-course.service
    -> adapt all paths to the correct ones. if incorrect and a rewrite of this file is needed: systemctl daemon-reload
    systemctl start fastapi-course.service
    sudo systemctl enable fastapi-course.service (to ensure it reloads after a crash)
    systemctl status fastapi-course.service

NGINX:
    -> in the ubuntu VM
    sudo apt install nginx -y
    systemctl start nginx
    nano /etc/nginx/sites-available/
        -> add locations
    systemctl restart nginx
    
connect app to domain:
    -> in your domain provider (Hostinger), change the nameservers to ns1.dns-digitalocean.com
    -> in DigitalOcean -> Manage DNS -> add domain 
    -> create A record (hostname = @, will redirect to ubuntu-fastapi-course). It takes some time for the network to propagate these changes.

add https to nginx:
    ssh sql-admin@188.166.166.197
    -> following instructions from https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal
    sudo snap install core; sudo snap refresh core
    sudo snap install --classic certbot
    sudo certbot --nginx

Ensure nginx restarts automatically on a reboot:
    systemctl status nginx
    -> check that it says "enabled"

Set up firewall:
    sudo ufw status     (ufw is the ubuntu's built in firewall)
    sudo ufw allow http
    sudo ufw allow https
    sudo ufw allow ssh
    sudo ufw allow 5432     (WARNING: it would allow access from every location to the DB, not for PROD)
    sudo ufw enable
    sudo ufw status
    -> if needed in the future, sudo ufw delete allow http

-------------------------------------------------------------------------------------

Update app with new code manually (not important, this can be done with a CD/CI pipeline):
    git pull    (in the app folder inside the ununtu VM)
    pip install -r requirements.txt     (if needed)
    sudo systemctl restart fastapi-course.service

Create docker image:
    from alo@alo:~/courses/backend/fastapi$ -> docker build -t fastapi-course .
    -> create docker-compose.yml
    docker compose up -d
    docker compose down
    -> change whatever in the .yml file
    docker compose up -d

    docker exec -it fastapi-api-1 bash   (when access to the container via terminal is needed)
    -> docker does not expose postgres in localhost:5432
    -> instead, you can "docker inspect fastapi-postgres-1" and get the IPAddress in which it is exposed

Upload docker image
    docker login
    docker image tag fastapi-api alcupa/fastapi-course
    docker push alcupa/fastapi-course

Shutting up/down docker compose when the files are not named docker-compose.yml:
    docker compose -f docker-compose-dev.yml up -d
    docker compose -f docker-compose-dev.yml down

-------------------------------------------------------------------------------------

Testing with pytest
    pytest -v
    (pytest -v --disable-warnings)
    (pytest -v -s tests/test_users.py) -> to show prints
    (pytest -v tests/test_users.py) -> to run only tests in that file
    (pytest -v -x) -> to make pytest stop after the first test failure

    -> fixtures can be used to avoid repeating code, and the return of one fixture can be used in a different one

